# Fluentd configuration for multi-agent logging aggregation

# Input: Collect logs from mounted volumes
<source>
  @type tail
  path /logs/agent*/app.log
  pos_file /fluentd/log/agent.log.pos
  tag agent.logs
  <parse>
    @type json
  </parse>
</source>

# Input: Monitor agent log files
<source>
  @type tail
  path /logs/agent*/*.log
  exclude_path ["/logs/agent*/app.log"]
  pos_file /fluentd/log/agent-general.log.pos
  tag agent.general
  <parse>
    @type multiline
    format_firstline /^\d{4}-\d{2}-\d{2}/
    format1 /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\s+\[(?<level>\w+)\]\s+(?<message>.*)/
    time_format %Y-%m-%d %H:%M:%S.%L
  </parse>
</source>

# Filter: Add metadata
<filter agent.**>
  @type record_transformer
  <record>
    hostname ${hostname}
    tag ${tag}
    timestamp ${time}
  </record>
</filter>

# Output: Write aggregated logs to file
<match agent.**>
  @type file
  path /fluentd/log/aggregated/${tag}
  time_slice_format %Y%m%d
  time_slice_wait 10m
  time_format %Y-%m-%d %H:%M:%S
  compress gzip
  <buffer tag,time>
    @type file
    path /fluentd/log/buffer/
    flush_mode interval
    flush_interval 10s
    retry_type exponential_backoff
    retry_wait 1s
    retry_max_interval 30s
    retry_timeout 1h
  </buffer>
  <format>
    @type json
  </format>
</match>

# Output: Console output for debugging
<match **>
  @type stdout
  <format>
    @type json
  </format>
</match>