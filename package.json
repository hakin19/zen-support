{
  "name": "@aizen/workspace",
  "version": "0.0.1",
  "type": "module",
  "private": true,
  "description": "Zen & Zen Network Support (Aizen vNE) - AI-powered Virtual Network Engineer",
  "keywords": [
    "network",
    "diagnostics",
    "ai",
    "support"
  ],
  "license": "UNLICENSED",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0"
  },
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "// Development": "Scripts for local development",
    "dev": "nx run-many --target=dev --all --parallel",
    "dev:api": "nx run @aizen/api-gateway:dev",
    "dev:web": "nx run @aizen/web-portal:dev",
    "dev:device": "nx run @aizen/device-agent:dev",
    "dev:ai": "nx run @aizen/ai-orchestrator:dev",
    "dev:docker": "docker-compose --env-file .env -f infrastructure/docker/docker-compose.yml up",
    "dev:docker:build": "docker-compose --env-file .env -f infrastructure/docker/docker-compose.yml build",
    "dev:docker:down": "docker-compose --env-file .env -f infrastructure/docker/docker-compose.yml down",
    "// Building": "Scripts for building the project",
    "build": "nx run-many --target=build --all",
    "build:affected": "nx affected --target=build",
    "build:docker": "docker-compose --env-file .env -f infrastructure/docker/docker-compose.yml build --no-cache",
    "// Testing": "Scripts for testing",
    "test": "vitest run",
    "test:watch": "vitest watch",
    "test:coverage": "vitest run --coverage",
    "test:ui": "vitest --ui",
    "test:all": "nx run-many --target=test --all",
    "test:affected": "nx affected --target=test",
    "test:unit": "nx run-many --target=test:unit --all",
    "test:integration": "nx run-many --target=test:integration --all",
    "test:e2e": "nx run-many --target=test:e2e --all",
    "test:docker": "docker-compose --env-file .env.test -f infrastructure/docker/docker-compose.test.yml up --abort-on-container-exit",
    "test:docker:build": "docker-compose --env-file .env.test -f infrastructure/docker/docker-compose.test.yml build",
    "test:docker:down": "docker-compose --env-file .env.test -f infrastructure/docker/docker-compose.test.yml down -v",
    "test:local": "vitest run --reporter=verbose",
    "// Test Environment Management": "Scripts for managing test environment",
    "test:supabase:start": "./scripts/test-db-init.sh start",
    "test:supabase:stop": "./scripts/test-db-init.sh stop",
    "test:supabase:reset": "./scripts/test-db-init.sh reset",
    "test:supabase:init": "./scripts/test-db-init.sh init",
    "test:supabase:status": "./scripts/test-db-init.sh status",
    "test:env": "npm run test:supabase:init && npm test",
    "test:ci": "npm run test:supabase:init && npm run test:coverage",
    "// Development Workflow": "Scripts for development workflow automation",
    "test:runner": "tsx scripts/test-runner.ts",
    "test:watch:tdd": "tsx scripts/test-watch.ts",
    "dev:test": "tsx scripts/dev-test.ts",
    "dev:validate": "tsx scripts/dev-test.ts --fix --coverage",
    "env:check": "tsx scripts/env-check.ts",
    "workflow": "tsx scripts/workflow.ts",
    "deps:health": "tsx scripts/deps-check.ts",
    "pre-release": "tsx scripts/pre-release.ts",
    "// Test Data Management": "Scripts for test data seeding and cleanup",
    "seed:test": "tsx scripts/seed-test-data.ts",
    "cleanup:test": "tsx scripts/cleanup-test-data.ts",
    "reset:test-db": "tsx scripts/reset-test-db.ts",
    "// Code Quality": "Scripts for linting and formatting",
    "lint": "nx run-many --target=lint --all",
    "lint:fix": "nx run-many --target=lint:fix --all",
    "lint:affected": "nx affected --target=lint",
    "type-check": "nx run-many --target=type-check --all",
    "format": "nx format:write",
    "format:check": "nx format:check",
    "format:all": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md,yml,yaml}\"",
    "// Quality Gates": "Scripts for quality gates and coverage",
    "quality:check": "tsx scripts/quality-gates.ts",
    "coverage:view": "open coverage/index.html",
    "coverage:clean": "rm -rf coverage/",
    "coverage:badge": "tsx scripts/coverage-badge.ts",
    "coverage:aggregate": "tsx scripts/coverage-aggregator.ts",
    "// Dependency Management": "Scripts for managing dependencies",
    "deps:check": "nx run-many --target=deps:check --all",
    "deps:update": "npm update && nx migrate latest",
    "audit": "npm audit",
    "audit:fix": "npm audit fix",
    "// Utilities": "Utility scripts",
    "graph": "nx graph",
    "affected": "nx affected --graph",
    "clean": "nx reset && rm -rf node_modules packages/*/node_modules dist tmp",
    "clean:cache": "nx reset",
    "clean:full": "npm run clean && rm -rf .nx",
    "reset": "npm run clean:full && npm install",
    "// CI/CD": "Scripts for continuous integration",
    "ci:test": "npm run lint && npm run type-check && npm run test",
    "ci:build": "npm run build",
    "ci:validate": "npm run format:check && npm run lint && npm run type-check && npm run test && npm run build",
    "// Supabase": "Scripts for Supabase management",
    "supabase:link": "cd packages && supabase link --project-ref $SUPABASE_PROJECT_ID",
    "supabase:migrate": "cd packages && supabase db push",
    "supabase:seed": "cd packages && supabase db seed",
    "supabase:types": "cd packages && supabase gen types typescript --project-id $SUPABASE_PROJECT_ID > shared/src/types/supabase.ts",
    "// SSL Management": "Scripts for SSL certificate management",
    "ssl:setup": "./scripts/setup-ssl.sh",
    "ssl:renew": "./scripts/renew-ssl.sh",
    "ssl:validate": "./scripts/validate-ssl.sh",
    "ssl:hosts": "./scripts/update-hosts.sh",
    "dev:ssl": "source .env.ssl && npm run dev:docker",
    "dev:ssl:compose": "docker-compose -f infrastructure/docker/docker-compose.yml -f infrastructure/docker/docker-compose.ssl.yml up",
    "// Setup": "Initial setup scripts",
    "setup": "npm install && npm run prepare",
    "setup:env": "cp .env.example .env",
    "prepare": "husky"
  },
  "devDependencies": {
    "@faker-js/faker": "^10.0.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^24.3.0",
    "@typescript-eslint/eslint-plugin": "^8.40.0",
    "@typescript-eslint/parser": "^8.40.0",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "chokidar": "^3.6.0",
    "dotenv": "^17.2.1",
    "eslint": "^9.34.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "happy-dom": "^18.0.1",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.5",
    "lodash-es": "^4.17.21",
    "msw": "^2.10.5",
    "nx": "^21.4.1",
    "prettier": "^3.6.2",
    "supabase": "^2.34.3",
    "tsx": "^4.20.4",
    "typescript": "^5.9.2",
    "vitest": "^3.2.4"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.56.0",
    "redis": "^5.8.2"
  }
}
