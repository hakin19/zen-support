#!/bin/bash

# Aizen vNE - Local SSL Certificate Setup Script
# This script sets up local SSL certificates for development using mkcert

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
SSL_DIR="infrastructure/ssl"
DOMAINS=(
    "aizen.local"
    "*.aizen.local"
    "api.aizen.local"
    "app.aizen.local"
    "device.aizen.local"
    "ai.aizen.local"
    "localhost"
    "127.0.0.1"
)

echo -e "${GREEN}=== Aizen vNE SSL Certificate Setup ===${NC}"
echo ""

# Check if mkcert is installed
check_mkcert() {
    if ! command -v mkcert &> /dev/null; then
        echo -e "${RED}Error: mkcert is not installed${NC}"
        echo ""
        echo "Please install mkcert first:"
        echo ""
        echo "  macOS:    brew install mkcert"
        echo "  Linux:    sudo apt install libnss3-tools && brew install mkcert"
        echo "  Windows:  choco install mkcert"
        echo ""
        echo "Or visit: https://github.com/FiloSottile/mkcert#installation"
        exit 1
    fi
    echo -e "${GREEN}✓${NC} mkcert is installed"
}

# Install local CA
install_ca() {
    echo -e "\n${YELLOW}Installing local Certificate Authority...${NC}"
    mkcert -install
    echo -e "${GREEN}✓${NC} Local CA installed and trusted"
}

# Create SSL directory
create_ssl_dir() {
    echo -e "\n${YELLOW}Creating SSL directory...${NC}"
    mkdir -p "$SSL_DIR"
    echo -e "${GREEN}✓${NC} SSL directory created at $SSL_DIR"
}

# Generate certificates
generate_certificates() {
    echo -e "\n${YELLOW}Generating SSL certificates...${NC}"
    cd "$SSL_DIR"
    
    # Generate main certificate covering all domains
    mkcert "${DOMAINS[@]}"
    
    # Rename to standard names
    mv "aizen.local+7.pem" "cert.pem" 2>/dev/null || mv "aizen.local+7-cert.pem" "cert.pem" 2>/dev/null || true
    mv "aizen.local+7-key.pem" "key.pem" 2>/dev/null || true
    
    # Set appropriate permissions
    chmod 644 cert.pem
    chmod 600 key.pem
    
    cd ../..
    echo -e "${GREEN}✓${NC} SSL certificates generated"
    echo "  Certificate: $SSL_DIR/cert.pem"
    echo "  Private Key: $SSL_DIR/key.pem"
}

# Update hosts file
update_hosts() {
    echo -e "\n${YELLOW}Updating /etc/hosts file...${NC}"
    
    HOSTS_ENTRIES=(
        "127.0.0.1 aizen.local"
        "127.0.0.1 api.aizen.local"
        "127.0.0.1 app.aizen.local"
        "127.0.0.1 device.aizen.local"
        "127.0.0.1 ai.aizen.local"
    )
    
    echo -e "${YELLOW}The following entries need to be added to /etc/hosts:${NC}"
    echo ""
    echo "# Aizen vNE Development"
    for entry in "${HOSTS_ENTRIES[@]}"; do
        echo "$entry"
    done
    echo ""
    
    read -p "Do you want to add these entries to /etc/hosts? (requires sudo) [y/N]: " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Backup hosts file
        sudo cp /etc/hosts /etc/hosts.backup.$(date +%Y%m%d_%H%M%S)
        
        # Add entries if they don't exist
        for entry in "${HOSTS_ENTRIES[@]}"; do
            if ! grep -q "$entry" /etc/hosts; then
                echo "$entry" | sudo tee -a /etc/hosts > /dev/null
            fi
        done
        echo -e "${GREEN}✓${NC} /etc/hosts file updated"
    else
        echo -e "${YELLOW}Skipped updating /etc/hosts${NC}"
        echo "You can manually add the entries later or run this script again"
    fi
}

# Create .env.ssl file
create_env_file() {
    echo -e "\n${YELLOW}Creating SSL environment variables file...${NC}"
    
    cat > .env.ssl << EOF
# SSL/TLS Configuration for Local Development
# Generated by setup-ssl.sh on $(date)

# SSL Certificate Paths
SSL_CERT_PATH=/app/ssl/cert.pem
SSL_KEY_PATH=/app/ssl/key.pem
SSL_CERT_HOST_PATH=./infrastructure/ssl/cert.pem
SSL_KEY_HOST_PATH=./infrastructure/ssl/key.pem

# HTTPS Configuration
HTTPS_ENABLED=true
NODE_TLS_REJECT_UNAUTHORIZED=0

# Service URLs (HTTPS)
API_URL=https://api.aizen.local
WEB_URL=https://app.aizen.local
DEVICE_URL=https://device.aizen.local
AI_URL=https://ai.aizen.local

# Public URLs for Next.js
NEXT_PUBLIC_API_URL=https://api.aizen.local
NEXT_PUBLIC_WEB_URL=https://app.aizen.local
EOF
    
    echo -e "${GREEN}✓${NC} SSL environment variables saved to .env.ssl"
}

# Update .gitignore
update_gitignore() {
    echo -e "\n${YELLOW}Updating .gitignore...${NC}"
    
    # Check if .gitignore exists
    if [ ! -f .gitignore ]; then
        touch .gitignore
    fi
    
    # Add SSL certificate exclusions if not already present
    if ! grep -q "infrastructure/ssl/\*.pem" .gitignore; then
        echo "" >> .gitignore
        echo "# SSL Certificates (local development)" >> .gitignore
        echo "infrastructure/ssl/*.pem" >> .gitignore
        echo "infrastructure/ssl/*.key" >> .gitignore
        echo ".env.ssl" >> .gitignore
    fi
    
    echo -e "${GREEN}✓${NC} .gitignore updated"
}

# Show next steps
show_next_steps() {
    echo ""
    echo -e "${GREEN}=== SSL Setup Complete! ===${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Source the SSL environment variables:"
    echo "   source .env.ssl"
    echo ""
    echo "2. Update your .env file with SSL settings from .env.ssl"
    echo ""
    echo "3. Start the development environment:"
    echo "   npm run dev:ssl"
    echo ""
    echo "4. Access services via HTTPS:"
    echo "   - API Gateway: https://api.aizen.local"
    echo "   - Web Portal:  https://app.aizen.local"
    echo "   - Device Agent: https://device.aizen.local"
    echo "   - AI Service:  https://ai.aizen.local"
    echo ""
    echo -e "${YELLOW}Note:${NC} You may need to restart your browser for the CA to be trusted"
}

# Main execution
main() {
    check_mkcert
    install_ca
    create_ssl_dir
    generate_certificates
    update_hosts
    create_env_file
    update_gitignore
    show_next_steps
}

# Run main function
main